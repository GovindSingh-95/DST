#include <stdio.h>
#include <ctype.h>

char stack[100];
int top = -1;

void push(char ele) {
    top++;
    stack[top] = ele;
}

char pop() {
    return stack[top--];
}

int pr(char op) {
    switch (op) {
        case '#': return 0;
        case '(': return 1;
        case '+': return 2;
        case '-': return 2;
        case '*': return 3;
        case '/': return 3;
        default: return 0;
    }
}

int main() {
    char infix[100], postfix[100];
    int i = 0, count = 0;
    char ch;

    printf("Enter your infix expression: ");
    scanf("%s", infix);

    push('#');

    while (infix[i] != '\0') {
        if (isalpha(infix[i])) {
            postfix[count] = infix[i];
            count++;
        } else if (infix[i] == '(') {
            push(infix[i]);
        } else if (infix[i] == ')') {
            while (stack[top] != '(') {
                ch = pop();
                postfix[count] = ch;
                count++;
            }
            pop();
        } else {
            while (stack[top] != '#' && pr(infix[i]) <= pr(stack[top])) {
                ch = pop();
                postfix[count] = ch;
                count++;
            }
            push(infix[i]);
        }
        i++;
    }

    while (stack[top] != '#') {
        if (stack[top] == '(') {
            printf("\nError: Mismatched parentheses in the expression.");
            return 1;
        }
        ch = pop();
        postfix[count] = ch;
        count++;
    }

    printf("Postfix expression: ");
    for (i = 0; i < count; i++) {
        printf("%c", postfix[i]);
    }
    printf("\n");

    return 0;
}

